- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    input(
      id= inputId
      name=getInputName(propertyName)
      placeholder= propertyName
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin select(entity, propertyName, errors = {}, items)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (!propertyErrors ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - name = getInputName(propertyName)
  - selectedOptions = entity[propertyName] ? [entity[propertyName]].flat().map((item) => item.id ? Number(item.id) : Number(item)) : []
  .form-group
    label(for=inputId)= t(`views.${propertyName}`)
    select.form-control(
        id= inputId,
        name=name,
        class=classLine
      )
      option
      each item in items
        - isSelect = _.includes(selectedOptions, item.id)
        option(value=item.id selected= isSelect)= item.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')